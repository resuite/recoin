.Input,
.Button {
  min-height: var(--FormInputMinHeight);
  border: none;
  font: inherit;
}

.InputContainer {
  position: relative;

  &::after {
    position: absolute;
    bottom: 0;
    left: 0;
    display: block;
    width: 100%;
    height: var(--Stroke);
    background-color: var(--TextColor);
    content: '';
    transform-origin: left;
    animation: InputLine var(--AnimationDurationSlow) var(--AnimationDuration)
      backwards;
  }

  .Input {
    position: relative;
    min-width: 100%;
    border-radius: 0px;
    outline: none;
    color: inherit;
    background-color: transparent;

    &::placeholder {
      opacity: 0.7;
      color: var(--TextColor);
    }
  }
}

.Button {
  --ButtonContentArea: calc(
    var(--ButtonWidth) - (var(--ButtonInlinePadding) / 2)
  );
  --ButtonSqueezeXOffset: (
    (1 - var(--ButtonSqueezeX)) * var(--ButtonContentArea) * -1
  );
  --ButtonTransition: var(--AnimationDuration);

  display: grid;
  width: var(--ButtonWidth);
  padding: 0;
  background-color: transparent;

  transition: scale var(--AnimationDurationFast);
  text-decoration: none;
  grid:
    auto /
    var(--ButtonInlinePadding) 1fr var(--ButtonInlinePadding);

  &:active {
    scale: 0.98;
  }

  &:disabled {
    cursor: not-allowed;
  }

  &::before,
  &::after {
    display: block;
    height: 100%;
    content: '';
  }

  &::before {
    border-radius: var(--Rounded) 0 0 var(--Rounded);
    background-color: var(--TextColor);
    transition: translate var(--ButtonTransition);
  }

  &::after {
    border-radius: 0 var(--Rounded) var(--Rounded) 0;
    background-color: var(--TextColor);
    transition: translate var(--ButtonTransition);
    translate: 1px;
  }

  &[data-align-x='left'] {
    &::before {
      translate: calc(1px + var(--ButtonSqueezeXOffset) / -2);
    }

    &::after {
      translate: calc(-1px + var(--ButtonSqueezeXOffset) / 2);
    }

    @media (orientation: landscape) {
      &::before {
        translate: 1px;
      }

      &::after {
        translate: calc(-1px + var(--ButtonSqueezeXOffset));
      }

      & > .ButtonContentContainer::before {
        transform-origin: 0 0;
      }

      & > .ButtonContentContainer > * {
        translate: calc(var(--ButtonSqueezeXOffset) / 2);
      }
    }
  }

  .ButtonContentContainer {
    position: relative;
    display: grid;
    align-items: center;
    width: 100%;
    height: 100%;
    color: var(--BackgroundColor);
    font-weight: 700;
    place-items: center;
    place-content: center;
    grid-auto-flow: column;
    column-gap: var(--SpacingQuarter);

    &::before {
      position: absolute;
      top: 0;
      display: block;
      width: 100%;
      height: 100%;
      background-color: var(--TextColor);
      content: '';
      transition: scale var(--ButtonTransition);
      scale: var(--ButtonSqueezeX) 1;
    }

    & > * {
      position: relative;
      transition: translate var(--ButtonTransition);
    }
  }

  .ButtonIconContainer {
    display: grid;
    place-items: center;
  }

  .ButtonIcon {
    width: 14px;
  }
}
